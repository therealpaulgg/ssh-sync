name: Builds

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: false

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      -
        name: Set GOARCH environment variable
        run: |
          if ("${{ matrix.arch }}" -eq "amd64") {
            echo "GOARCH=amd64" >> $env:GITHUB_ENV
          } elseif ("${{ matrix.arch }}" -eq "arm64") {
            echo "GOARCH=arm64" >> $env:GITHUB_ENV
          }
        shell: powershell
      -
        name: Go Build
        run: go build -o ./win-build/ssh-sync-${{ matrix.arch }}.exe -ldflags "-X main.version=${{github.ref_name}}"
        shell: powershell
      -
        name: Inno Build
        run: |
          & "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" /dMyAppVersion="${{github.ref_name}}" /dMyAppArch="${{ matrix.arch }}" "$env:GITHUB_WORKSPACE\win-build\setup.iss"
        shell: powershell

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"

      - name: Set GOARCH environment variable
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOARM=7" >> $GITHUB_ENV
          fi

      - name: Go Build
        run: go build -o ssh-sync-${{ matrix.arch }} -ldflags "-X main.version=${{github.ref_name}}"

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm zstd
          sudo gem install --no-document fpm

      - name: Create test packages
        run: |
          # Create a .deb package
          fpm -s dir -t deb -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          --deb-no-default-config-files \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

          # Create an .rpm package
          fpm -s dir -t rpm -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

          # Create an Arch Linux package (.tar.zst)
          fpm -s dir -t tar -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          # Compress with zstd and rename to follow Arch naming convention
          mv ssh-sync.tar ssh-sync-test-build-${{ matrix.arch }}.tar
          zstd ssh-sync-test-build-${{ matrix.arch }}.tar -o ssh-sync-test-build-${{ matrix.arch }}.pkg.tar.zst
          rm ssh-sync-test-build-${{ matrix.arch }}.tar

      - name: Verify packages were created
        run: |
          echo "Created packages:"
          ls -la *.deb *.rpm *.pkg.tar.zst

  build-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
        include:
          - arch: amd64
            alpine_arch: x86_64
            goarch: amd64
          - arch: arm64
            alpine_arch: aarch64
            goarch: arm64
          - arch: arm
            alpine_arch: armv7
            goarch: arm
            goarm: "7"
    steps:
      - name: Install dependencies
        run: |
          apk add --no-cache git go build-base alpine-sdk sudo

      - name: Setup build user
        run: |
          adduser -D -s /bin/sh builder
          addgroup builder abuild
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Go binary
        run: |
          export GOARCH=${{ matrix.goarch }}
          ${{ matrix.goarm && format('export GOARM={0}', matrix.goarm) || '' }}
          go build -buildvcs=false -o ssh-sync -ldflags "-X main.version=test-build"
          
      - name: Setup abuild keys
        run: |
          sudo -u builder abuild-keygen -n
          # Find the generated key and set it as the packager key
          KEYFILE=$(sudo -u builder find /home/builder/.abuild -name "*.rsa" | head -1)
          sudo -u builder sh -c "echo 'PACKAGER_PRIVKEY='$KEYFILE > /home/builder/.abuild/abuild.conf"
          
      - name: Create APKBUILD
        run: |
          sudo -u builder mkdir -p /home/builder/ssh-sync
          sudo -u builder tee /home/builder/ssh-sync/APKBUILD > /dev/null << EOF
          # Maintainer: Test Build
          pkgname=ssh-sync
          pkgver=0.0.1
          pkgrel=1
          pkgdesc="SSH sync utility"
          arch="${{ matrix.alpine_arch }}"
          url="https://github.com/therealpaulgg/ssh-sync"
          license="MIT"
          source="ssh-sync"
          options="!check"

          package() {
              install -Dm755 "\$srcdir/ssh-sync" "\$pkgdir/usr/local/bin/ssh-sync"
          }
          EOF
          
      - name: Copy binary and build package
        run: |
          sudo -u builder cp ssh-sync /home/builder/ssh-sync/
          cd /home/builder/ssh-sync
          sudo -u builder CARCH=${{ matrix.alpine_arch }} abuild checksum
          sudo -u builder CARCH=${{ matrix.alpine_arch }} abuild -r
          
      - name: Verify package
        run: |
          echo "Package created:"
          find /home/builder/packages -name "*.apk" -type f | head -5