name: Builds

on:
  pull_request:
    branches: [ "main" ]

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: false

  build-windows:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      -
        name: Set GOARCH environment variable
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          fi
      -
        name: Go Build
        run: go build -o ssh-sync-${{ matrix.arch }}.exe -ldflags "-X main.version=test-build"
      -
        name: Verify build
        run: ls -la ssh-sync-${{ matrix.arch }}.exe

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"

      - name: Set GOARCH environment variable
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOARM=7" >> $GITHUB_ENV
          fi

      - name: Go Build
        run: go build -o ssh-sync-${{ matrix.arch }} -ldflags "-X main.version=test-build"

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm zstd
          sudo gem install --no-document fpm

      - name: Create test packages
        run: |
          # Create a .deb package
          fpm -s dir -t deb -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          --deb-no-default-config-files \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

          # Create an .rpm package
          fpm -s dir -t rpm -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

          # Create an Arch Linux package (.tar.zst)
          fpm -s dir -t tar -a ${{ matrix.arch }} -n ssh-sync -v "test-build" --description "ssh-sync test build" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          # Compress with zstd and rename to follow Arch naming convention
          mv ssh-sync.tar ssh-sync-test-build-${{ matrix.arch }}.tar
          zstd ssh-sync-test-build-${{ matrix.arch }}.tar -o ssh-sync-test-build-${{ matrix.arch }}.pkg.tar.zst
          rm ssh-sync-test-build-${{ matrix.arch }}.tar

      - name: Verify packages were created
        run: |
          echo "Created packages:"
          ls -la *.deb *.rpm *.pkg.tar.zst

  build-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
        include:
          - arch: amd64
            alpine_arch: x86_64
          - arch: arm64
            alpine_arch: aarch64
          - arch: arm
            alpine_arch: armv7
    steps:
      - name: Install dependencies and setup user
        run: |
          apk add --no-cache git go build-base alpine-sdk sudo
          adduser -D -s /bin/sh builder
          addgroup builder abuild
          echo "builder ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build binary and create package
        run: |
          # Set Go environment
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            export GOARCH=amd64
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            export GOARCH=arm64
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            export GOARCH=arm
            export GOARM=7
          fi
          
          # Build binary
          go build -buildvcs=false -o ssh-sync -ldflags "-X main.version=test-build"
          
          # Verify binary was created
          ls -la ssh-sync
          
          # Copy to a location accessible by builder user
          cp ssh-sync /tmp/ssh-sync
          chmod 755 /tmp/ssh-sync
          
          # Switch to builder user and setup
          sudo -u builder sh << 'SCRIPT'
          cd /home/builder
          
          # Generate Alpine signing keys
          abuild-keygen -a -i
          
          # Create APKBUILD
          mkdir -p package
          cd package
          cat > APKBUILD << EOF
          pkgname=ssh-sync
          pkgver=test-build
          pkgrel=1
          pkgdesc="ssh-sync application"
          arch="${{ matrix.alpine_arch }}"
          url="https://github.com/your-repo/ssh-sync"
          license="MIT"
          source="ssh-sync"
          options="!check"

          package() {
              install -Dm755 "\$srcdir/ssh-sync" "\$pkgdir/usr/local/bin/ssh-sync"
          }
          EOF
          
          # Copy binary to package directory
          cp /tmp/ssh-sync .
          
          # Verify file is there
          ls -la ssh-sync
          
          # Build package
          abuild checksum
          abuild -r
          SCRIPT
          
          echo "Alpine package built successfully for ${{ matrix.alpine_arch }}"
          find /home/builder/packages -name "*.apk" | head -5