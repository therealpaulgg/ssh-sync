name: release

on: 
  push:
    tags:
    - '*'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ssh-sync:latest
  build-windows:
    runs-on: windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      -
        name: Go Build
        run: go build -o ./win-build/ssh-sync.exe -ldflags "-X main.version=${{github.ref_name}}"
        shell: powershell
      -
        name: Inno Build
        run: |
          & "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" /dMyAppVersion="${{github.ref_name}}" "$env:GITHUB_WORKSPACE\win-build\setup.iss"
        shell: powershell
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync-setup
          path: ./win-build/Output/ssh-sync-setup.exe
          retention-days: 5
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      - name: Go Build
        run: go build -o ssh-sync -ldflags "-X main.version=${{github.ref_name}}"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync
          path: ./ssh-sync
          retention-days: 5
      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm dpkg-dev apt-utils createrepo-c
          sudo gem install --no-document fpm

      - name: Create a .deb package
        run: |
          fpm -s dir -t deb -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          --deb-no-default-config-files \
          ./ssh-sync=/usr/local/bin/ssh-sync

      - name: Create an .rpm package
        run: |
          fpm -s dir -t rpm -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync=/usr/local/bin/ssh-sync
      - name: Upload Linux Packages
        uses: actions/upload-artifact@v4
        with:
          name: packages
          path: |
            *.deb
            *.rpm
      - name: Import GPG key
        run: |
          mkdir -p ~/.gnupg
          echo "${{ secrets.PACKAGE_GPG_KEY }}" | gpg --batch --import
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent

      - name: Build package repository
        run: |
          mkdir -p repo/deb repo/rpm
          cp *.deb repo/deb/
          apt-ftparchive packages repo/deb > repo/deb/Packages
          gzip -c repo/deb/Packages > repo/deb/Packages.gz
          apt-ftparchive release repo/deb > repo/deb/Release
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.PACKAGE_GPG_PASSPHRASE }}" -o repo/deb/Release.gpg -ba repo/deb/Release
          gpg --batch --yes --armor --export > repo/public.key
          cp *.rpm repo/rpm/
          createrepo-c repo/rpm
          gpg --batch --yes --pinentry-mode loopback --passphrase "${{ secrets.PACKAGE_GPG_PASSPHRASE }}" --detach-sign --armor repo/rpm/repodata/repomd.xml
      - name: Upload Repository
        uses: actions/upload-artifact@v4
        with:
          name: repo
          path: repo
          retention-days: 5
  release:
    needs: [build-docker, build-windows, build-linux]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "./ssh-sync-setup/ssh-sync-setup.exe,./ssh-sync/ssh-sync,./packages/*.deb,./packages/*.rpm"
          token: ${{ secrets.ACCESS_TOKEN_CLASSIC }}

  upload-repo:
    needs: release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Download repository artifact
        uses: actions/download-artifact@v4
        with:
          name: repo
          path: repo
      - name: Upload repository to host
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.PACKAGE_HOST }}
          username: ${{ secrets.PACKAGE_HOST_USER }}
          key: ${{ secrets.PACKAGE_HOST_KEY }}
          source: "repo/*"
          target: ${{ secrets.PACKAGE_TARGET_DIR }}
          strip_components: 1
          rm: true
