name: release

on: 
  push:
    tags:
    - '*'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ssh-sync:latest
  build-windows:
    runs-on: windows-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      -
        name: Go Build
        run: go build -o ./win-build/ssh-sync.exe -ldflags "-X main.version=${{github.ref_name}}"
        shell: powershell
      -
        name: Inno Build
        run: |
          & "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" /dMyAppVersion="${{github.ref_name}}" "$env:GITHUB_WORKSPACE\win-build\setup.iss"
        shell: powershell
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync-setup
          path: ./win-build/Output/ssh-sync-setup.exe
          retention-days: 5
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      - name: Set GOARCH environment variable
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOARM=7" >> $GITHUB_ENV
          fi
      - name: Go Build
        run: go build -o ssh-sync-${{ matrix.arch }} -ldflags "-X main.version=${{github.ref_name}}"
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync-${{ matrix.arch }}
          path: ./ssh-sync-${{ matrix.arch }}
          retention-days: 5
      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm
          sudo gem install --no-document fpm

      - name: Create a .deb package
        run: |
          fpm -s dir -t deb -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          --deb-no-default-config-files \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

      - name: Create an .rpm package
        run: |
          fpm -s dir -t rpm -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          
      - name: Create an .apk package (Alpine)
        run: |
          fpm -s dir -t apk -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          
      - name: Create an Arch package
        run: |
          fpm -s dir -t pacman -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          
      - name: Upload Linux Packages as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: |
            *.deb
            *.rpm
            *.apk
            *.tar.zst
            ./debian/${{ matrix.arch }}/*.deb
            ./rpm/${{ matrix.arch }}/*.rpm
            
      - name: Organize Packages by Type
        run: |
          mkdir -p ./debian/${{ matrix.arch }}
          mkdir -p ./rpm/${{ matrix.arch }}
          
          # Move packages to their respective directories
          mv *.deb ./debian/${{ matrix.arch }}/ || true
          mv *.rpm ./rpm/${{ matrix.arch }}/ || true
          
      - name: Deploy Packages to Repository Server
        if: startsWith(github.ref, 'refs/tags/')
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          source: "./debian/${{ matrix.arch }}/*.deb,./rpm/${{ matrix.arch }}/*.rpm"
          target: ${{ secrets.REPO_SERVER_PATH }}
          
  update-repositories:
    needs: [build-linux]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Update Repository Indexes
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            # Update Debian repository
            cd ${{ secrets.REPO_SERVER_PATH }}/debian
            dpkg-scanpackages --multiversion . > Packages
            gzip -k -f Packages
            apt-ftparchive release . > Release
            
            # Update RPM repository
            cd ${{ secrets.REPO_SERVER_PATH }}/rpm
            createrepo_c .
  release:
    needs: [build-docker, build-windows, build-linux, update-repositories]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "./ssh-sync-setup/ssh-sync-setup.exe,./ssh-sync-amd64/ssh-sync-amd64,./ssh-sync-arm64/ssh-sync-arm64,./ssh-sync-arm/ssh-sync-arm,./packages-amd64/*.deb,./packages-amd64/*.rpm,./packages-amd64/*.apk,./packages-amd64/*.tar.zst,./packages-arm64/*.deb,./packages-arm64/*.rpm,./packages-arm64/*.apk,./packages-arm64/*.tar.zst,./packages-arm/*.deb,./packages-arm/*.rpm,./packages-arm/*.apk,./packages-arm/*.tar.zst"
          token: ${{ secrets.ACCESS_TOKEN_CLASSIC }}
