name: release

on: 
  push:
    tags:
    - '*'

jobs:
  build-docker:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build and push
        uses: docker/build-push-action@v3
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ssh-sync:latest

  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"
      -
        name: Set GOARCH environment variable
        run: |
          if ("${{ matrix.arch }}" -eq "amd64") {
            echo "GOARCH=amd64" >> $env:GITHUB_ENV
          } elseif ("${{ matrix.arch }}" -eq "arm64") {
            echo "GOARCH=arm64" >> $env:GITHUB_ENV
          }
        shell: powershell
      -
        name: Go Build
        run: go build -o ./win-build/ssh-sync-${{ matrix.arch }}.exe -ldflags "-X main.version=${{github.ref_name}}"
        shell: powershell
      -
        name: Inno Build
        run: |
          & "${env:ProgramFiles(x86)}\Inno Setup 6\iscc.exe" /dMyAppVersion="${{github.ref_name}}" /dMyAppArch="${{ matrix.arch }}" "$env:GITHUB_WORKSPACE\win-build\setup.iss"
        shell: powershell
      - name: 'Upload Artifact'
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync-setup-${{ matrix.arch }}
          path: ./win-build/Output/ssh-sync-setup-${{ matrix.arch }}.exe
          retention-days: 5

  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ">=1.19.7"

      - name: Set GOARCH environment variable
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            echo "GOARCH=arm" >> $GITHUB_ENV
            echo "GOARM=7" >> $GITHUB_ENV
          fi

      - name: Go Build
        run: go build -o ssh-sync-${{ matrix.arch }} -ldflags "-X main.version=${{github.ref_name}}"

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ssh-sync-${{ matrix.arch }}
          path: ./ssh-sync-${{ matrix.arch }}
          retention-days: 5

      - name: Install FPM
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev rubygems build-essential rpm zstd
          sudo gem install --no-document fpm

      - name: Create a .deb package
        run: |
          fpm -s dir -t deb -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          --deb-no-default-config-files \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

      - name: Create an .rpm package
        run: |
          fpm -s dir -t rpm -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync

      - name: Create an Arch Linux package (.tar.zst)
        run: |
          fpm -s dir -t tar -a ${{ matrix.arch }} -n ssh-sync -v ${{ github.ref_name }} --description "ssh-sync" \
          ./ssh-sync-${{ matrix.arch }}=/usr/local/bin/ssh-sync
          # Compress with zstd and rename to follow Arch naming convention
          mv ssh-sync.tar ssh-sync-${{ github.ref_name }}-${{ matrix.arch }}.tar
          zstd ssh-sync-${{ github.ref_name }}-${{ matrix.arch }}.tar -o ssh-sync-${{ github.ref_name }}-${{ matrix.arch }}.pkg.tar.zst
          rm ssh-sync-${{ github.ref_name }}-${{ matrix.arch }}.tar

      - name: Organize Packages by Type
        run: |
          mkdir -p ./debian/${{ matrix.arch }}
          mkdir -p ./rpm/${{ matrix.arch }}
          mkdir -p ./arch/${{ matrix.arch }}

          # Move packages to their respective directories
          mv *.deb ./debian/${{ matrix.arch }}/ || true
          mv *.rpm ./rpm/${{ matrix.arch }}/ || true
          mv *.pkg.tar.zst ./arch/${{ matrix.arch }}/ || true

      - name: Upload Linux Packages as Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: packages-${{ matrix.arch }}
          path: |
            ./debian/${{ matrix.arch }}/*.deb
            ./rpm/${{ matrix.arch }}/*.rpm
            ./arch/${{ matrix.arch }}/*.pkg.tar.zst

      - name: Deploy Packages to Repository Server
        if: startsWith(github.ref, 'refs/tags/')
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          source: "./debian/${{ matrix.arch }}/*.deb,./rpm/${{ matrix.arch }}/*.rpm,./arch/${{ matrix.arch }}/*.pkg.tar.zst"
          target: ${{ secrets.REPO_SERVER_PATH }}
          overwrite: true

  build-alpine:
    runs-on: ubuntu-latest
    container:
      image: alpine:latest
    strategy:
      matrix:
        arch: [amd64, arm64, arm]
        include:
          - arch: amd64
            alpine_arch: x86_64
          - arch: arm64
            alpine_arch: aarch64
          - arch: arm
            alpine_arch: armv7
    steps:
      - name: Install dependencies
        run: |
          apk add --no-cache git go build-base alpine-sdk coreutils
          
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go environment
        run: |
          if [ "${{ matrix.arch }}" = "amd64" ]; then
            export GOARCH=amd64
          elif [ "${{ matrix.arch }}" = "arm64" ]; then
            export GOARCH=arm64
          elif [ "${{ matrix.arch }}" = "arm" ]; then
            export GOARCH=arm
            export GOARM=7
          fi
          echo "GOARCH=$GOARCH" >> $GITHUB_ENV
          if [ -n "$GOARM" ]; then
            echo "GOARM=$GOARM" >> $GITHUB_ENV
          fi

      - name: Build Go binary
        run: |
          go build -o ssh-sync-${{ matrix.arch }} -ldflags "-X main.version=${{ github.ref_name }}"

      - name: Setup Alpine signing keys
        run: |
          mkdir -p ~/.abuild
          echo "${{ secrets.ALPINE_PRIVATE_KEY }}" | base64 -d > ~/.abuild/ssh-sync.rsa
          echo "${{ secrets.ALPINE_PUBLIC_KEY }}" | base64 -d > ~/.abuild/ssh-sync.rsa.pub
          chmod 600 ~/.abuild/ssh-sync.rsa
          chmod 644 ~/.abuild/ssh-sync.rsa.pub

      - name: Create APKBUILD file
        run: |
          mkdir -p apk-build
          cd apk-build
          cat > APKBUILD << 'EOF'
          # Maintainer: ssh-sync
          pkgname=ssh-sync
          pkgver=${{ github.ref_name }}
          pkgrel=1
          pkgdesc="ssh-sync application"
          arch="${{ matrix.alpine_arch }}"
          url="https://github.com/your-repo/ssh-sync"
          license="MIT"
          source="ssh-sync"
          options="!check"

          package() {
              install -Dm755 "$srcdir/ssh-sync" "$pkgdir/usr/local/bin/ssh-sync"
          }
          EOF
          
          # Copy the binary to the source location
          cp ../ssh-sync-${{ matrix.arch }} ssh-sync

      - name: Build and sign APK package
        run: |
          cd apk-build
          
          # Create checksums
          abuild checksum
          
          # Build the package
          abuild -r
          
          # The built package will be in ~/packages/apk-build/${{ matrix.alpine_arch }}/
          mkdir -p ../alpine-packages
          cp ~/packages/*/{{ matrix.alpine_arch }}/*.apk ../alpine-packages/ || true

      - name: Upload Alpine packages as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alpine-packages-${{ matrix.arch }}
          path: alpine-packages/*.apk
          retention-days: 5

      - name: Deploy Alpine packages to repository server
        if: startsWith(github.ref, 'refs/tags/')
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          source: "alpine-packages/*.apk"
          target: ${{ secrets.REPO_SERVER_PATH }}/alpine/${{ matrix.alpine_arch }}/
          overwrite: true

  sign-and-update-repositories:
    needs: [build-linux, build-alpine]
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Setup GPG for Repository Signing
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            # Import GPG key if not already present
            if ! gpg --list-secret-keys | grep -q "${{ secrets.REPO_SERVER_GPG_KEY_ID }}"; then
              echo "${{ secrets.REPO_SERVER_GPG_KEY }}" | base64 -d | gpg --batch --import
            fi

            # Configure GPG for unattended operation
            mkdir -p ~/.gnupg
            echo "use-agent" > ~/.gnupg/gpg.conf
            echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
            echo "default-cache-ttl 86400" > ~/.gnupg/gpg-agent.conf
            echo "max-cache-ttl 86400" >> ~/.gnupg/gpg-agent.conf
            echo "allow-preset-passphrase" >> ~/.gnupg/gpg-agent.conf

            # Restart GPG agent
            gpgconf --kill gpg-agent || true
            gpgconf --launch gpg-agent || true

      - name: Sign RPM Packages and Update Repository
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            cd ${{ secrets.REPO_SERVER_PATH }}/rpm

            # Configure RPM signing
            cat > ~/.rpmmacros << EOF
            %_gpg_name ${{ secrets.REPO_SERVER_GPG_KEY_ID }}
            %_gpg_path $HOME/.gnupg
            %__gpg_sign_cmd %{__gpg} \
                gpg --batch --verbose --no-armor --no-secmem-warning \
                --passphrase-fd 3 --pinentry-mode loopback \
                -u "%{_gpg_name}" -sbo %{__signature_filename} %{__plaintext_filename}
            EOF

            # Sign all unsigned RPM packages in architecture subdirectories
            for arch_dir in */; do
                if [ -d "$arch_dir" ]; then
                    echo "Processing architecture directory: $arch_dir"
                    cd "$arch_dir"
                    for rpm in *.rpm; do
                        if [ -f "$rpm" ]; then
                            # Check if already signed
                            if ! rpm -qp --qf '%{SIGPGP:pgpsig}' "$rpm" 2>/dev/null | grep -q "Key ID"; then
                                echo "Signing $rpm..."
                                echo "${{ secrets.REPO_SERVER_GPG_PASSPHRASE }}" | rpm --addsign "$rpm" 3<&0
                            else
                                echo "$rpm is already signed"
                            fi
                        fi
                    done
                    cd ..
                fi
            done

            # Also sign any RPMs in the root directory (fallback)
            for rpm in *.rpm; do
                if [ -f "$rpm" ]; then
                    # Check if already signed
                    if ! rpm -qp --qf '%{SIGPGP:pgpsig}' "$rpm" 2>/dev/null | grep -q "Key ID"; then
                        echo "Signing $rpm..."
                        echo "${{ secrets.REPO_SERVER_GPG_PASSPHRASE }}" | rpm --addsign "$rpm" 3<&0
                    else
                        echo "$rpm is already signed"
                    fi
                fi
            done

            # Create/update repository metadata
            createrepo_c .

            # Sign repository metadata
            if [ -f "repodata/repomd.xml" ]; then
                echo "${{ secrets.REPO_SERVER_GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback \
                    --passphrase-fd 0 --armor --detach-sign repodata/repomd.xml
            fi

            echo "RPM repository updated and signed successfully"

      - name: Sign Debian Repository and Update Metadata
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            cd ${{ secrets.REPO_SERVER_PATH }}/debian

            # Flatten directory structure for Debian repo (combine all architectures)
            find . -name "*.deb" -path "*/amd64/*" -exec mv {} . \;
            find . -name "*.deb" -path "*/arm64/*" -exec mv {} . \;
            find . -name "*.deb" -path "*/arm/*" -exec mv {} . \;

            # Remove empty architecture directories
            rmdir */amd64 */arm64 */arm 2>/dev/null || true

            # Generate Packages file
            dpkg-scanpackages --multiversion . > Packages
            gzip -k -f Packages

            # Generate Release file
            apt-ftparchive release . > Release

            # Sign the Release file (InRelease)
            echo "${{ secrets.REPO_SERVER_GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback \
                --passphrase-fd 0 --local-user "${{ secrets.REPO_SERVER_GPG_KEY_ID }}" --clearsign -o InRelease Release

            # Create detached signature (Release.gpg)
            echo "${{ secrets.REPO_SERVER_GPG_PASSPHRASE }}" | gpg --batch --yes --pinentry-mode loopback \
                --passphrase-fd 0 --local-user "${{ secrets.REPO_SERVER_GPG_KEY_ID }}" --armor --detach-sign -o Release.gpg Release

            echo "Debian repository updated and signed successfully"

      - name: Setup Alpine Repository Structure
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            cd ${{ secrets.REPO_SERVER_PATH }}/alpine

            # Ensure directory structure exists
            mkdir -p x86_64 aarch64 armv7

            # Verify packages are present and set proper permissions
            for arch in x86_64 aarch64 armv7; do
                if [ -d "$arch" ] && [ "$(ls -A $arch/*.apk 2>/dev/null)" ]; then
                    echo "Found Alpine packages for $arch:"
                    ls -la $arch/*.apk
                    chmod 644 $arch/*.apk
                else
                    echo "No Alpine packages found for $arch"
                fi
            done

            # Export Alpine public key for users to import
            if [ ! -f alpine-signing-key.pub ]; then
                echo "${{ secrets.ALPINE_PUBLIC_KEY }}" | base64 -d > alpine-signing-key.pub
                chmod 644 alpine-signing-key.pub
                echo "Alpine public key exported for repository users"
            fi

            echo "Alpine repository structure setup completed"
            echo "Note: Packages are pre-signed and ready for use"
            echo "Users can add the repository and import the signing key manually"

      - name: Setup Arch Linux Repository
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            cd ${{ secrets.REPO_SERVER_PATH }}

            # Create arch directory structure
            mkdir -p arch/x86_64
            mkdir -p arch/aarch64
            mkdir -p arch/armv7h

            # Move .pkg.tar.zst packages to appropriate architecture directories
            find . -path "./arch/amd64/*.pkg.tar.zst" -exec mv {} arch/x86_64/ \; 2>/dev/null || true
            find . -path "./arch/arm64/*.pkg.tar.zst" -exec mv {} arch/aarch64/ \; 2>/dev/null || true
            find . -path "./arch/arm/*.pkg.tar.zst" -exec mv {} arch/armv7h/ \; 2>/dev/null || true

            # Generate repository databases for each architecture
            for arch in x86_64 aarch64 armv7h; do
                if [ -d "arch/$arch" ] && [ "$(ls -A arch/$arch/*.pkg.tar.zst 2>/dev/null)" ]; then
                    cd arch/$arch
                    
                    echo "Creating repository database for $arch..."
                    
                    # Create repository database using repo-add (if available)
                    if command -v repo-add &> /dev/null; then
                        repo-add ssh-sync.db.tar.xz *.pkg.tar.zst
                    else
                        echo "Warning: repo-add not available, creating basic database structure"
                        # Create a basic database structure manually
                        echo "Repository database for ssh-sync packages ($arch)" > ssh-sync.db.tar.xz.desc
                        tar -cJf ssh-sync.db.tar.xz ssh-sync.db.tar.xz.desc
                        rm ssh-sync.db.tar.xz.desc
                    fi
                    
                    # Create symlinks as expected by pacman
                    ln -sf ssh-sync.db.tar.xz ssh-sync.db 2>/dev/null || true
                    
                    cd ../..
                fi
            done

            echo "Arch Linux repository setup completed"

      - name: Export Public Key for Distribution
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.REPO_SERVER_HOST }}
          username: ${{ secrets.REPO_SERVER_USER }}
          key: ${{ secrets.REPO_SERVER_SSH_KEY }}
          port: ${{ secrets.REPO_SERVER_PORT }}
          script: |
            cd ${{ secrets.REPO_SERVER_PATH }}

            # Export GPG public key for distribution
            gpg --armor --export "${{ secrets.REPO_SERVER_GPG_KEY_ID }}" > pubkey.gpg
            gpg --armor --export "${{ secrets.REPO_SERVER_GPG_KEY_ID }}" > ssh-sync-repo.asc

            # Export Alpine public key for distribution
            if [ -f ~/.abuild/ssh-sync.rsa.pub ]; then
                cp ~/.abuild/ssh-sync.rsa.pub alpine-signing-key.pub
                chmod 644 alpine-signing-key.pub
            fi

            # Set proper permissions
            chmod 644 pubkey.gpg ssh-sync-repo.asc

            echo "Public keys exported successfully"

  release:
    needs: [build-docker, build-windows, build-linux, build-alpine, sign-and-update-repositories]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v4
      - uses: ncipollo/release-action@v1
        with:
          artifacts: "./ssh-sync-setup-amd64/ssh-sync-setup-amd64.exe,./ssh-sync-setup-arm64/ssh-sync-setup-arm64.exe,./ssh-sync-amd64/ssh-sync-amd64,./ssh-sync-arm64/ssh-sync-arm64,./ssh-sync-arm/ssh-sync-arm,./packages-amd64/debian/amd64/*.deb,./packages-amd64/rpm/amd64/*.rpm,./packages-amd64/arch/amd64/*.pkg.tar.zst,./packages-arm64/debian/arm64/*.deb,./packages-arm64/rpm/arm64/*.rpm,./packages-arm64/arch/arm64/*.pkg.tar.zst,./packages-arm/debian/arm/*.deb,./packages-arm/rpm/arm/*.rpm,./packages-arm/arch/arm/*.pkg.tar.zst,./alpine-packages-amd64/*.apk,./alpine-packages-arm64/*.apk,./alpine-packages-arm/*.apk"
          token: ${{ secrets.ACCESS_TOKEN_CLASSIC }}